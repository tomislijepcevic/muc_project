package muc.project.model;

import muc.project.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CLIENT_AP".
 */
public class Client_AccessPoint {

    private Long id;
    private Long clientId;
    private Long accessPointId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient Client_AccessPointDao myDao;

    private Client client;
    private Long client__resolvedKey;

    private AccessPoint accessPoint;
    private Long accessPoint__resolvedKey;


    public Client_AccessPoint() {
    }

    public Client_AccessPoint(Long id) {
        this.id = id;
    }

    public Client_AccessPoint(Long id, Long clientId, Long accessPointId) {
        this.id = id;
        this.clientId = clientId;
        this.accessPointId = accessPointId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClient_AccessPointDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getClientId() {
        return clientId;
    }

    public void setClientId(Long clientId) {
        this.clientId = clientId;
    }

    public Long getAccessPointId() {
        return accessPointId;
    }

    public void setAccessPointId(Long accessPointId) {
        this.accessPointId = accessPointId;
    }

    /** To-one relationship, resolved on first access. */
    public Client getClient() {
        Long __key = this.clientId;
        if (client__resolvedKey == null || !client__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClientDao targetDao = daoSession.getClientDao();
            Client clientNew = targetDao.load(__key);
            synchronized (this) {
                client = clientNew;
            	client__resolvedKey = __key;
            }
        }
        return client;
    }

    public void setClient(Client client) {
        synchronized (this) {
            this.client = client;
            clientId = client == null ? null : client.getId();
            client__resolvedKey = clientId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public AccessPoint getAccessPoint() {
        Long __key = this.accessPointId;
        if (accessPoint__resolvedKey == null || !accessPoint__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccessPointDao targetDao = daoSession.getAccessPointDao();
            AccessPoint accessPointNew = targetDao.load(__key);
            synchronized (this) {
                accessPoint = accessPointNew;
            	accessPoint__resolvedKey = __key;
            }
        }
        return accessPoint;
    }

    public void setAccessPoint(AccessPoint accessPoint) {
        synchronized (this) {
            this.accessPoint = accessPoint;
            accessPointId = accessPoint == null ? null : accessPoint.getId();
            accessPoint__resolvedKey = accessPointId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
