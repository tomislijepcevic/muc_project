package muc.project.model;

import java.util.List;
import muc.project.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CLIENT".
 */
public class Client {

    private Long id;
    /** Not-null value. */
    private String mac;
    private String manufacturer;
    private Boolean subscribed;
    private String name;
    private int counter;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ClientDao myDao;

    private List<History> history;
    private List<Client_AccessPoint> clientAccessPoint;

    public Client() {
    }

    public Client(Long id) {
        this.id = id;
    }

    public Client(Long id, String mac, String manufacturer, Boolean subscribed, String name, int counter) {
        this.id = id;
        this.mac = mac;
        this.manufacturer = manufacturer;
        this.subscribed = subscribed;
        this.name = name;
        this.counter = counter;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClientDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getMac() {
        return mac;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMac(String mac) {
        this.mac = mac;
    }

    public String getManufacturer() {
        return manufacturer;
    }

    public void setManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
    }

    public Boolean getSubscribed() {
        return subscribed;
    }

    public void setSubscribed(Boolean subscribed) {
        this.subscribed = subscribed;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getCounter() {
        return counter;
    }

    public void setCounter(int counter) {
        this.counter = counter;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<History> getHistory() {
        if (history == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HistoryDao targetDao = daoSession.getHistoryDao();
            List<History> historyNew = targetDao._queryClient_History(id);
            synchronized (this) {
                if(history == null) {
                    history = historyNew;
                }
            }
        }
        return history;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHistory() {
        history = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Client_AccessPoint> getClientAccessPoint() {
        if (clientAccessPoint == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Client_AccessPointDao targetDao = daoSession.getClient_AccessPointDao();
            List<Client_AccessPoint> clientAccessPointNew = targetDao._queryClient_ClientAccessPoint(id);
            synchronized (this) {
                if(clientAccessPoint == null) {
                    clientAccessPoint = clientAccessPointNew;
                }
            }
        }
        return clientAccessPoint;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetClientAccessPoint() {
        clientAccessPoint = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
